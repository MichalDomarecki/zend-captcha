{
    "docs": [
        {
            "location": "/",
            "text": "zend-captcha\n\n\n\n\n\n\nZend\\Captcha\n component is able to manage \u201cCompletely Automated Public Turing\ntest to tell Computers and Humans Apart\u201d (CAPTCHA); it is used as a\nchallenge-response to ensure that the individual submitting information is a\nhuman and not an automated process. Typically, a captcha is used with form\nsubmissions where authenticated users are not necessary, but you want to prevent\nspam submissions.\n\n\n\n\nFile issues at https://github.com/zendframework/zend-captcha/issues\n\n\nDocumentation is at https://docs.zendframework.com/zend-captcha/",
            "title": "zend-captcha"
        },
        {
            "location": "/#zend-captcha",
            "text": "Zend\\Captcha  component is able to manage \u201cCompletely Automated Public Turing\ntest to tell Computers and Humans Apart\u201d (CAPTCHA); it is used as a\nchallenge-response to ensure that the individual submitting information is a\nhuman and not an automated process. Typically, a captcha is used with form\nsubmissions where authenticated users are not necessary, but you want to prevent\nspam submissions.   File issues at https://github.com/zendframework/zend-captcha/issues  Documentation is at https://docs.zendframework.com/zend-captcha/",
            "title": "zend-captcha"
        },
        {
            "location": "/intro/",
            "text": "Introduction\n\n\nCAPTCHA\n stands for \"Completely Automated\nPublic Turing test to tell Computers and Humans Apart\"; it is used as a\nchallenge-response to ensure that the individual submitting information is a\nhuman and not an automated process. Typically, a captcha is used with form\nsubmissions where authenticated users are not necessary, but you want to prevent\nspam submissions.\n\n\nOverview\n\n\nCAPTCHAs can take a variety of forms, including asking logic questions,\npresenting skewed fonts, and presenting multiple images and asking how they\nrelate. The \nZend\\Captcha\n component aims to provide a variety of back ends that\nmay be utilized either standalone or in conjunction with\n\nzend-form\n.",
            "title": "Intro"
        },
        {
            "location": "/intro/#introduction",
            "text": "CAPTCHA  stands for \"Completely Automated\nPublic Turing test to tell Computers and Humans Apart\"; it is used as a\nchallenge-response to ensure that the individual submitting information is a\nhuman and not an automated process. Typically, a captcha is used with form\nsubmissions where authenticated users are not necessary, but you want to prevent\nspam submissions.",
            "title": "Introduction"
        },
        {
            "location": "/intro/#overview",
            "text": "CAPTCHAs can take a variety of forms, including asking logic questions,\npresenting skewed fonts, and presenting multiple images and asking how they\nrelate. The  Zend\\Captcha  component aims to provide a variety of back ends that\nmay be utilized either standalone or in conjunction with zend-form .",
            "title": "Overview"
        },
        {
            "location": "/usage/",
            "text": "Usage\n\n\nA basic use case resembles the following:\n\n\n// Originating request:\n$captcha = new Zend\\Captcha\\Figlet([\n    'name'    => 'foo',\n    'wordLen' => 6,\n    'timeout' => 300,\n]);\n\n$id = $captcha->generate();\n\n// This will output a Figlet string:\necho $captcha->getFiglet()->render($captcha->getWord());\n\n// On a subsequent request:\n// Assume a captcha setup as before, with corresponding form fields, the value\n// of $_POST['foo'] would be a key/value array containing:\n// - id => captcha ID\n// - input => captcha value\nif ($captcha->isValid($_POST['foo'], $_POST)) {\n    // Validated!\n}\n\n\n\nThe above example demonstrates usage of a FIGlet string for the CAPTCHA.\nzend-captcha also provides adapters for:\n\n\n\n\nImages\n\n\nreCAPTCHA\n\n\n\n\nand an interface allowing you to define and implement your own solutions.\n\n\nThe options required will vary based on the adapter you use, but in all cases,\nyou will use the combination of:\n\n\n\n\ngenerate()\n\n\nsome mechanism of the adapter to render the CAPTCHA\n\n\nisValid()\n to validate a submitted CAPTCHA solution\n\n\n\n\n\n\nzend-form integration\n\n\nzend-form\n contains integration\nwith zend-captcha via the class \nZend\\Form\\Element\\Captcha\n; read the\n\ndocumentation on the CAPTCHA form element\n\nfor more details.",
            "title": "Usage"
        },
        {
            "location": "/usage/#usage",
            "text": "A basic use case resembles the following:  // Originating request:\n$captcha = new Zend\\Captcha\\Figlet([\n    'name'    => 'foo',\n    'wordLen' => 6,\n    'timeout' => 300,\n]);\n\n$id = $captcha->generate();\n\n// This will output a Figlet string:\necho $captcha->getFiglet()->render($captcha->getWord());\n\n// On a subsequent request:\n// Assume a captcha setup as before, with corresponding form fields, the value\n// of $_POST['foo'] would be a key/value array containing:\n// - id => captcha ID\n// - input => captcha value\nif ($captcha->isValid($_POST['foo'], $_POST)) {\n    // Validated!\n}  The above example demonstrates usage of a FIGlet string for the CAPTCHA.\nzend-captcha also provides adapters for:   Images  reCAPTCHA   and an interface allowing you to define and implement your own solutions.  The options required will vary based on the adapter you use, but in all cases,\nyou will use the combination of:   generate()  some mechanism of the adapter to render the CAPTCHA  isValid()  to validate a submitted CAPTCHA solution",
            "title": "Usage"
        },
        {
            "location": "/usage/#zend-form-integration",
            "text": "zend-form  contains integration\nwith zend-captcha via the class  Zend\\Form\\Element\\Captcha ; read the documentation on the CAPTCHA form element \nfor more details.",
            "title": "zend-form integration"
        },
        {
            "location": "/adapters/",
            "text": "CAPTCHA Adapters\n\n\nzend-captcha defines an abstraction for CAPTCHA implementations via\n\nZend\\Captcha\\AdapterInterface\n, and provides several implementations.\n\n\nThe AdapterInterface\n\n\nAll CAPTCHA adapters implement \nZend\\Captcha\\AdapterInterface\n:\n\n\nnamespace Zend\\Captcha;\n\nuse Zend\\Validator\\ValidatorInterface;\n\ninterface AdapterInterface extends ValidatorInterface\n{\n    public function generate();\n\n    public function setName($name);\n\n    public function getName();\n\n    // Get helper name used for rendering this CAPTCHA type\n    public function getHelperName();\n}\n\n\n\nThe \nname\n setter and getter are used to specify and retrieve the CAPTCHA identifier.\n\n\nThe most interesting method is \ngenerate()\n, which is used to create the CAPTCHA\ntoken. This process typically will store the token in the session so that you\nmay compare against it in subsequent requests.\n\n\nMost implementations also define a \nrender()\n method (or delegate to one) in\norder to produce a CAPTCHA representation, be it an image, a figlet, a logic\nproblem, or some other CAPTCHA.\n\n\nZend\\Captcha\\AbstractWord\n\n\nZend\\Captcha\\AbstractWord\n is an abstract adapter that serves as the base class\nfor most other CAPTCHA adapters. It provides mutators for specifying word\nlength, session TTL and the session container object to use; it also\nencapsulates validation logic.\n\n\nBy default, the word length is 8 characters, the session timeout is 5 minutes,\nand \nZend\\Session\\Container\n is used for persistence (using the namespace\n\"\nZend\\Form\\Captcha\\<captcha ID>\n\").\n\n\nIn addition to the methods required by the \nZend\\Captcha\\AdapterInterface\n interface,\n\nZend\\Captcha\\AbstractWord\n exposes the following methods:\n\n\n\n\nsetWordLen($length)\n and \ngetWordLen()\n allow you to specify the length of\n  the generated \"word\" in characters, and to retrieve the current value.\n\n\nsetTimeout($ttl)\n and \ngetTimeout()\n allow you to specify the time-to-live of\n  the session token, and to retrieve the current value. \n$ttl\n should be\n  specified in \nseconds\n.\n\n\nsetUseNumbers($numbers)\n and \ngetUseNumbers()\n allow you to specify if\n  numbers will be considered as possible characters for the random word, or if\n  only letters would be used.\n\n\nsetSessionClass($class)\n and \ngetSessionClass()\n allow you to specify an\n  alternate \nZend\\Session\\Container\n implementation to use to persist the\n  CAPTCHA token and to retrieve the current value.\n\n\ngetId()\n allows you to retrieve the current token identifier.\n\n\ngetWord()\n allows you to retrieve the generated word to use with the CAPTCHA.\n  It will generate the word for you if none has been generated yet.\n\n\nsetSession(Zend\\Session\\Container $session)\n allows you to specify a session\n  object to use for persisting the CAPTCHA token. \ngetSession()\n allows you to\n  retrieve the current session object.\n\n\n\n\nAll word CAPTCHAs allow you to pass an array of options or a \nTraversable\n\nobject to the constructor, or, alternately, pass them to \nsetOptions()\n. By\ndefault, the \nwordLen\n, \ntimeout\n, and \nsessionClass\n keys may all be used. Each\nconcrete implementation may define additional keys or utilize the options in\nother ways.\n\n\n\n\nAbstractWord is marked abstract\n\n\nZend\\Captcha\\AbstractWord\n is an abstract class and may not be instantiated\ndirectly.\n\n\n\n\nZend\\Captcha\\Dumb\n\n\nThe \nZend\\Captcha\\Dumb\n adapter is mostly self-descriptive. It provides a random\nstring that must be typed in reverse to validate. As such, it's not a good\nCAPTCHA solution and should only be used for testing. It extends\n\nZend\\Captcha\\AbstractWord\n.\n\n\nZend\\Captcha\\Figlet\n\n\nThe \nZend\\Captcha\\Figlet\n adapter utilizes \nZend\\Text\\Figlet\n to present a\nfiglet to the user.\n\n\nOptions passed to the constructor will also be passed to the\n\nZend\\Text\\Figlet\n object. See the\n\nZend\\Text\\Figlet\n\ndocumentation for details on what configuration options are available.\n\n\nZend\\Captcha\\Image\n\n\nThe \nZend\\Captcha\\Image\n adapter takes the generated word and renders it as an\nimage, performing various skewing permutations to make it difficult to\nautomatically decipher. It requires the \nGD extension\n,\ncompiled with TrueType or Freetype support. Currently, the \nZend\\Captcha\\Image\n\nadapter can only generate PNG images.\n\n\nZend\\Captcha\\Image\n extends \nZend\\Captcha\\AbstractWord\n, and additionally\nexposes the following methods:\n\n\n\n\nsetExpiration($expiration)\n and \ngetExpiration()\n allow you to specify a\n  maximum lifetime the CAPTCHA image may reside on the filesystem. This is\n  typically longer than the session lifetime.  Garbage collection is run\n  periodically each time the CAPTCHA object is invoked, deleting all images\n  that have expired. Expiration values should be specified in \nseconds\n.\n\n\nsetGcFreq($gcFreq)\n and \ngetGcFreg()\n allow you to specify how frequently\n  garbage collection should run. Garbage collection will run every \n1/$gcFreq\n\n  calls. The default is 100.\n\n\nsetFont($font)\n and \ngetFont()\n allow you to specify the font you will use.\n  \n$font\n should be a fully qualified path to the font file. This value is\n  required; the CAPTCHA will throw an exception during generation if the font\n  file has not been specified.\n\n\nsetFontSize($fsize)\n and \ngetFontSize()\n allow you to specify the font size\n  in pixels for generating the CAPTCHA. The default is 24px.\n\n\nsetHeight($height)\n and \ngetHeight()\n allow you to specify the height in\n  pixels of the generated CAPTCHA image. The default is 50px.\n\n\nsetWidth($width)\n and \ngetWidth()\n allow you to specify the width in pixels\n  of the generated CAPTCHA image. The default is 200px.\n\n\nsetImgDir($imgDir)\n and \ngetImgDir()\n allow you to specify the directory for\n  storing CAPTCHA images. The default is \n./images/captcha/\n, relative to\n  the bootstrap script (typically \npublic/index.php\n, resulting in\n  \npublic/images/captcha/\n).\n\n\nsetImgUrl($imgUrl)\n and \ngetImgUrl()\n allow you to specify the relative path\n  to a CAPTCHA image to use for HTML markup. The default is\n  \n/images/captcha/\n.\n\n\nsetSuffix($suffix)\n and \ngetSuffix()\n allow you to specify the filename\n  suffix for the CAPTCHA image. The default is \n.png\n. Note: changing this\n  value will not change the type of the generated image.\n\n\nsetDotNoiseLevel($level)\n and \ngetDotNoiseLevel()\n, along with\n  \nsetLineNoiseLevel($level)\n and \ngetLineNoiseLevel()\n, allow you to control\n  how much \"noise\" in the form of random dots and lines the image would contain.\n  Each unit of \n$level\n produces one random dot or line. The default is 100 dots\n  and 5 lines. The noise is added twice, both before and after the image\n  distortion transformation.\n\n\n\n\nAll of the above options may be passed to the constructor by simply removing the\n'set' method prefix and casting the initial letter to lowercase: \"suffix\",\n\"height\", \"imgUrl\", etc.\n\n\nZend\\Captcha\\ReCaptcha\n\n\nThe \nZend\\Captcha\\ReCaptcha\n adapter uses \nZend\\Service\\ReCaptcha\\ReCaptcha\n\nto generate and validate CAPTCHAs.  It exposes the following methods:\n\n\n\n\nsetSecretKey($key)\n and \ngetSecretKey()\n allow you to specify the secret key to\n  use for the ReCaptcha service. This must be specified during construction,\n  although it may be overridden at any point.\n\n\nsetSiteKey($key)\n and \ngetSiteKey()\n allow you to specify the site key to use\n  with the ReCaptcha service. This must be specified during construction,\n  although it may be overridden at any point.\n\n\nsetService(ZendService\\ReCaptcha\\ReCaptcha $service)\n and \ngetService()\n\n  allow you to set and get the ReCaptcha service object.\n\n\n\n\nWhen constructing \nZend\\Captcha\\ReCaptcha\n, you can use the same set of keys\nto the \n$options\n array as supported by \nZend\\Service\\ReCaptcha\\ReCaptcha\n.\n\n\nUpdating from v2 to v3 of this adapter\n\n\nAs this adapter takes the same option keys as \nZend\\Service\\ReCaptcha\\ReCaptcha\n which supports Recaptcha API v2, this\ncomponent no longer supports the \nssl\n, \nxhtml\n and \nlang\n keys in the \n$options\n\narray that is passed to the constructor.\n\n\nThe options keys \npubKey\n and \nprivKey\n and the getters and setters for these\nkeys are supported in this version, but are deprecated.",
            "title": "Adapters"
        },
        {
            "location": "/adapters/#captcha-adapters",
            "text": "zend-captcha defines an abstraction for CAPTCHA implementations via Zend\\Captcha\\AdapterInterface , and provides several implementations.",
            "title": "CAPTCHA Adapters"
        },
        {
            "location": "/adapters/#the-adapterinterface",
            "text": "All CAPTCHA adapters implement  Zend\\Captcha\\AdapterInterface :  namespace Zend\\Captcha;\n\nuse Zend\\Validator\\ValidatorInterface;\n\ninterface AdapterInterface extends ValidatorInterface\n{\n    public function generate();\n\n    public function setName($name);\n\n    public function getName();\n\n    // Get helper name used for rendering this CAPTCHA type\n    public function getHelperName();\n}  The  name  setter and getter are used to specify and retrieve the CAPTCHA identifier.  The most interesting method is  generate() , which is used to create the CAPTCHA\ntoken. This process typically will store the token in the session so that you\nmay compare against it in subsequent requests.  Most implementations also define a  render()  method (or delegate to one) in\norder to produce a CAPTCHA representation, be it an image, a figlet, a logic\nproblem, or some other CAPTCHA.",
            "title": "The AdapterInterface"
        },
        {
            "location": "/adapters/#zend92captcha92abstractword",
            "text": "Zend\\Captcha\\AbstractWord  is an abstract adapter that serves as the base class\nfor most other CAPTCHA adapters. It provides mutators for specifying word\nlength, session TTL and the session container object to use; it also\nencapsulates validation logic.  By default, the word length is 8 characters, the session timeout is 5 minutes,\nand  Zend\\Session\\Container  is used for persistence (using the namespace\n\" Zend\\Form\\Captcha\\<captcha ID> \").  In addition to the methods required by the  Zend\\Captcha\\AdapterInterface  interface, Zend\\Captcha\\AbstractWord  exposes the following methods:   setWordLen($length)  and  getWordLen()  allow you to specify the length of\n  the generated \"word\" in characters, and to retrieve the current value.  setTimeout($ttl)  and  getTimeout()  allow you to specify the time-to-live of\n  the session token, and to retrieve the current value.  $ttl  should be\n  specified in  seconds .  setUseNumbers($numbers)  and  getUseNumbers()  allow you to specify if\n  numbers will be considered as possible characters for the random word, or if\n  only letters would be used.  setSessionClass($class)  and  getSessionClass()  allow you to specify an\n  alternate  Zend\\Session\\Container  implementation to use to persist the\n  CAPTCHA token and to retrieve the current value.  getId()  allows you to retrieve the current token identifier.  getWord()  allows you to retrieve the generated word to use with the CAPTCHA.\n  It will generate the word for you if none has been generated yet.  setSession(Zend\\Session\\Container $session)  allows you to specify a session\n  object to use for persisting the CAPTCHA token.  getSession()  allows you to\n  retrieve the current session object.   All word CAPTCHAs allow you to pass an array of options or a  Traversable \nobject to the constructor, or, alternately, pass them to  setOptions() . By\ndefault, the  wordLen ,  timeout , and  sessionClass  keys may all be used. Each\nconcrete implementation may define additional keys or utilize the options in\nother ways.",
            "title": "Zend\\Captcha\\AbstractWord"
        },
        {
            "location": "/adapters/#abstractword-is-marked-abstract",
            "text": "Zend\\Captcha\\AbstractWord  is an abstract class and may not be instantiated\ndirectly.",
            "title": "AbstractWord is marked abstract"
        },
        {
            "location": "/adapters/#zend92captcha92dumb",
            "text": "The  Zend\\Captcha\\Dumb  adapter is mostly self-descriptive. It provides a random\nstring that must be typed in reverse to validate. As such, it's not a good\nCAPTCHA solution and should only be used for testing. It extends Zend\\Captcha\\AbstractWord .",
            "title": "Zend\\Captcha\\Dumb"
        },
        {
            "location": "/adapters/#zend92captcha92figlet",
            "text": "The  Zend\\Captcha\\Figlet  adapter utilizes  Zend\\Text\\Figlet  to present a\nfiglet to the user.  Options passed to the constructor will also be passed to the Zend\\Text\\Figlet  object. See the Zend\\Text\\Figlet \ndocumentation for details on what configuration options are available.",
            "title": "Zend\\Captcha\\Figlet"
        },
        {
            "location": "/adapters/#zend92captcha92image",
            "text": "The  Zend\\Captcha\\Image  adapter takes the generated word and renders it as an\nimage, performing various skewing permutations to make it difficult to\nautomatically decipher. It requires the  GD extension ,\ncompiled with TrueType or Freetype support. Currently, the  Zend\\Captcha\\Image \nadapter can only generate PNG images.  Zend\\Captcha\\Image  extends  Zend\\Captcha\\AbstractWord , and additionally\nexposes the following methods:   setExpiration($expiration)  and  getExpiration()  allow you to specify a\n  maximum lifetime the CAPTCHA image may reside on the filesystem. This is\n  typically longer than the session lifetime.  Garbage collection is run\n  periodically each time the CAPTCHA object is invoked, deleting all images\n  that have expired. Expiration values should be specified in  seconds .  setGcFreq($gcFreq)  and  getGcFreg()  allow you to specify how frequently\n  garbage collection should run. Garbage collection will run every  1/$gcFreq \n  calls. The default is 100.  setFont($font)  and  getFont()  allow you to specify the font you will use.\n   $font  should be a fully qualified path to the font file. This value is\n  required; the CAPTCHA will throw an exception during generation if the font\n  file has not been specified.  setFontSize($fsize)  and  getFontSize()  allow you to specify the font size\n  in pixels for generating the CAPTCHA. The default is 24px.  setHeight($height)  and  getHeight()  allow you to specify the height in\n  pixels of the generated CAPTCHA image. The default is 50px.  setWidth($width)  and  getWidth()  allow you to specify the width in pixels\n  of the generated CAPTCHA image. The default is 200px.  setImgDir($imgDir)  and  getImgDir()  allow you to specify the directory for\n  storing CAPTCHA images. The default is  ./images/captcha/ , relative to\n  the bootstrap script (typically  public/index.php , resulting in\n   public/images/captcha/ ).  setImgUrl($imgUrl)  and  getImgUrl()  allow you to specify the relative path\n  to a CAPTCHA image to use for HTML markup. The default is\n   /images/captcha/ .  setSuffix($suffix)  and  getSuffix()  allow you to specify the filename\n  suffix for the CAPTCHA image. The default is  .png . Note: changing this\n  value will not change the type of the generated image.  setDotNoiseLevel($level)  and  getDotNoiseLevel() , along with\n   setLineNoiseLevel($level)  and  getLineNoiseLevel() , allow you to control\n  how much \"noise\" in the form of random dots and lines the image would contain.\n  Each unit of  $level  produces one random dot or line. The default is 100 dots\n  and 5 lines. The noise is added twice, both before and after the image\n  distortion transformation.   All of the above options may be passed to the constructor by simply removing the\n'set' method prefix and casting the initial letter to lowercase: \"suffix\",\n\"height\", \"imgUrl\", etc.",
            "title": "Zend\\Captcha\\Image"
        },
        {
            "location": "/adapters/#zend92captcha92recaptcha",
            "text": "The  Zend\\Captcha\\ReCaptcha  adapter uses  Zend\\Service\\ReCaptcha\\ReCaptcha \nto generate and validate CAPTCHAs.  It exposes the following methods:   setSecretKey($key)  and  getSecretKey()  allow you to specify the secret key to\n  use for the ReCaptcha service. This must be specified during construction,\n  although it may be overridden at any point.  setSiteKey($key)  and  getSiteKey()  allow you to specify the site key to use\n  with the ReCaptcha service. This must be specified during construction,\n  although it may be overridden at any point.  setService(ZendService\\ReCaptcha\\ReCaptcha $service)  and  getService() \n  allow you to set and get the ReCaptcha service object.   When constructing  Zend\\Captcha\\ReCaptcha , you can use the same set of keys\nto the  $options  array as supported by  Zend\\Service\\ReCaptcha\\ReCaptcha .",
            "title": "Zend\\Captcha\\ReCaptcha"
        },
        {
            "location": "/adapters/#updating-from-v2-to-v3-of-this-adapter",
            "text": "As this adapter takes the same option keys as  Zend\\Service\\ReCaptcha\\ReCaptcha  which supports Recaptcha API v2, this\ncomponent no longer supports the  ssl ,  xhtml  and  lang  keys in the  $options \narray that is passed to the constructor.  The options keys  pubKey  and  privKey  and the getters and setters for these\nkeys are supported in this version, but are deprecated.",
            "title": "Updating from v2 to v3 of this adapter"
        }
    ]
}